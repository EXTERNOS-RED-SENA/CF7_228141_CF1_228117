{"remainingRequest":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/src/pages/Tema7.vue?vue&type=template&id=5d9bfeb6","dependencies":[{"path":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/src/pages/Tema7.vue","mtime":1734924366412},{"path":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF7_228141_CF1_228117/CF7_228141_CF1_228117/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}